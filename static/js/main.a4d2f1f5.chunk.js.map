{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","pagesLength","Math","ceil","pages","Array","from","length","_","index","items","setClickedPage","event","currentTarget","innerHTML","className","classNames","disabled","href","onClick","map","page","active","item","lastItem","to","numbers","n","push","getNumbers","App","useState","setPerPage","setCurrentPage","perPageValue","currentPageValue","maxNumber","minNumber","visibleItemsNumbers","id","value","onChange","target","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"oNAUaA,EAAa,SAAC,GAKb,IAJZC,EAIW,EAJXA,MACAC,EAGW,EAHXA,QACAC,EAEW,EAFXA,YACAC,EACW,EADXA,aAEMC,EAAcC,KAAKC,KAAKN,EAAQC,GAChCM,EAAQC,MAAMC,KAAK,CAAEC,OAAQN,IAAe,SAACO,EAAGC,GAAJ,OAAcA,EAAQ,KAClEC,EAAQL,MAAMC,KAAK,CAAEC,OAAQV,IAAS,SAACW,EAAGC,GAAJ,OAAcA,EAAQ,KAkB5DE,EAAiB,SAACC,GACtBZ,GAAcY,EAAMC,cAAcC,YAGpC,OACE,qCACE,qBAAIC,UAAU,aAAd,UACE,oBAAIA,UACFC,IACE,YACA,CAAEC,SAA0B,IAAhBlB,IAHhB,SAOE,mBACE,UAAQ,WACRgB,UAAU,YACVG,KAAK,QACLC,QAlCc,WACF,IAAhBpB,GAIJC,EAAaD,EAAc,IA8BnB,gBAA+B,IAAhBA,EALjB,oBAWAK,EAAMgB,KAAI,SAACC,GAAD,OACR,oBACEN,UACEC,IACE,YACA,CAAEM,OAAQvB,IAAgBsB,IAJhC,SAUE,mBACEF,QAASR,EACT,UAAQ,WACRI,UAAU,YACVG,KAAI,WAAMG,GAJZ,SAMGA,KATEA,MAcX,oBAAIN,UACFC,IACE,YACA,CAAEC,SAAUlB,IAAgBE,IAHhC,SAOE,mBACE,UAAQ,WACRc,UAAU,YACVG,KAAK,QACL,gBAAenB,IAAgBE,EAC/BkB,QAnEU,WACdpB,IAAgBE,GAIpBD,EAAaD,EAAc,IAyDrB,uBAWJ,6BACGW,EAAMU,KAAI,SAACG,GACV,IAAMC,EAAW1B,EAAUC,EAG3B,OAAIwB,EAFcC,EAAW1B,GAELyB,GAAQC,EAE5B,oBACE,UAAQ,OADV,wBAIWD,IAFJA,GAOJ,YChHXb,ECLC,SAAoBJ,EAAcmB,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIrB,EAAMqB,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,EDFKG,CAAW,EAAG,IACzBT,KAAI,SAAAO,GAAC,qBAAYA,MAEPG,EAAgB,WAC3B,MAA8BC,mBAAS,GAAvC,mBAAOjC,EAAP,KAAgBkC,EAAhB,KACA,EAAsCD,mBAAS,GAA/C,mBAAOhC,EAAP,KAAoBkC,EAApB,KAqBA,OACE,sBAAKlB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWhB,EADX,aAvBwB,SAC1BmC,EACAC,GAEA,IAAIC,EAAYF,EAAeC,EACzBE,EAAYF,EAAmBD,EAAe,EAAIA,EAMxD,OAJIE,EAAY1B,EAAMH,SACpB6B,EAAY1B,EAAMH,QAGd,SAAN,OAAgB8B,EAAhB,cAA+BD,GAaFE,CAAoBxC,EAC3CC,GAFJ,eAEuBW,EAAMH,OAF7B,OAKA,sBAAKQ,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRwB,GAAG,kBACHxB,UAAU,eACVyB,MAAO1C,EACP2C,SArBgB,SAAC7B,GACzBoB,GAAYpB,EAAM8B,OAAOF,OACzBP,EAAe,IAcT,UAOE,wBAAQO,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOG,QAAQ,kBAAkB5B,UAAU,qBAA3C,+BAIF,cAAC,EAAD,CACElB,MAAOa,EAAMH,OACbT,QAASA,EACTC,YAAaA,EACbC,aAAciC,QE7DtBW,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.a4d2f1f5.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { MouseEvent } from 'react';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (page: number) => void,\n};\n\nexport const Pagination = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}: Props) => {\n  const pagesLength = Math.ceil(total / perPage);\n  const pages = Array.from({ length: pagesLength }, (_, index) => index + 1);\n  const items = Array.from({ length: total }, (_, index) => index + 1);\n\n  const setPreviousPage = () => {\n    if (currentPage === 1) {\n      return;\n    }\n\n    onPageChange(currentPage - 1);\n  };\n\n  const setNextPage = () => {\n    if (currentPage === pagesLength) {\n      return;\n    }\n\n    onPageChange(currentPage + 1);\n  };\n\n  const setClickedPage = (event: MouseEvent<HTMLAnchorElement>) => {\n    onPageChange(+event.currentTarget.innerHTML);\n  };\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li className={\n          classNames(\n            'page-item',\n            { disabled: currentPage === 1 },\n          )\n        }\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            onClick={setPreviousPage}\n            aria-disabled={currentPage === 1}\n          >\n            «\n          </a>\n        </li>\n        {\n          pages.map((page) => (\n            <li\n              className={\n                classNames(\n                  'page-item',\n                  { active: currentPage === page },\n                )\n              }\n              key={page}\n            >\n\n              <a\n                onClick={setClickedPage}\n                data-cy=\"pageLink\"\n                className=\"page-link\"\n                href={`#${page}`}\n              >\n                {page}\n              </a>\n            </li>\n          ))\n        }\n        <li className={\n          classNames(\n            'page-item',\n            { disabled: currentPage === pagesLength },\n          )\n        }\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={currentPage === pagesLength}\n            onClick={setNextPage}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n      <ul>\n        {items.map((item) => {\n          const lastItem = perPage * currentPage;\n          const firstItem = lastItem - perPage;\n\n          if (item > firstItem && item <= lastItem) {\n            return (\n              <li\n                data-cy=\"item\"\n                key={item}\n              >\n                {`Item ${item}`}\n              </li>\n            );\n          }\n\n          return '';\n        })}\n      </ul>\n    </>\n  );\n};\n","import React, { ChangeEvent, useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const visibleItemsNumbers = (\n    perPageValue: number,\n    currentPageValue: number,\n  ) => {\n    let maxNumber = perPageValue * currentPageValue;\n    const minNumber = currentPageValue * perPageValue + 1 - perPageValue;\n\n    if (maxNumber > items.length) {\n      maxNumber = items.length;\n    }\n\n    return `items ${minNumber} - ${maxNumber}`;\n  };\n\n  const setPerPageHandler = (event:ChangeEvent<HTMLSelectElement>) => {\n    setPerPage(+event.target.value);\n    setCurrentPage(1);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (${visibleItemsNumbers(perPage,\n          currentPage)} of ${items.length})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={setPerPageHandler}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n      <Pagination\n        total={items.length}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}